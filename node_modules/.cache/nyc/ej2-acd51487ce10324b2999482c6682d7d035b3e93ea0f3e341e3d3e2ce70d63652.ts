"use strict";function cov_1k4pdjvaxw(){var path="/home/usuario/ull-esit-inf-dsi-21-22-prct11-async-sockets-alu0101326351/src/ej2/ej2.ts";var hash="a7fc80e19b29c164b8cf63f2402654ab0e376f9c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/ull-esit-inf-dsi-21-22-prct11-async-sockets-alu0101326351/src/ej2/ej2.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:4,column:24},end:{line:4,column:48}},"3":{start:{line:14,column:8},end:{line:14,column:25}},"4":{start:{line:21,column:26},end:{line:21,column:33}},"5":{start:{line:22,column:20},end:{line:22,column:66}},"6":{start:{line:23,column:21},end:{line:23,column:65}},"7":{start:{line:24,column:8},end:{line:24,column:36}},"8":{start:{line:25,column:8},end:{line:28,column:11}},"9":{start:{line:26,column:26},end:{line:26,column:58}},"10":{start:{line:27,column:12},end:{line:27,column:120}},"11":{start:{line:31,column:0},end:{line:31,column:32}},"12":{start:{line:33,column:14},end:{line:33,column:45}},"13":{start:{line:34,column:0},end:{line:34,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:22},end:{line:15,column:5}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:12},end:{line:29,column:5}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:25,column:31},end:{line:25,column:32}},loc:{start:{line:25,column:41},end:{line:28,column:9}},line:25}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/ull-esit-inf-dsi-21-22-prct11-async-sockets-alu0101326351/src/ej2/ej2.ts",sources:["/home/usuario/ull-esit-inf-dsi-21-22-prct11-async-sockets-alu0101326351/src/ej2/ej2.ts"],names:[],mappings:";;;AAAA,iDAAsC;AAEtC;;GAEG;AACH,MAAa,UAAU;IACnB;;;OAGG;IACH,YACY,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IACrB,CAAC;IAEJ;;;OAGG;IACI,KAAK;QACR,MAAM,SAAS,GAAW,OAAO,CAAC;QAClC,MAAM,GAAG,GAAG,IAAA,qBAAK,EAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,IAAA,qBAAK,EAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAErC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE5B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;YAC5B,IAAI,OAAO,GAAa,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,OAAO,CAAC,MAAM,EAAE,kCAAkC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAzBD,gCAyBC;AAAA,CAAC;AAEF,IAAI,OAAO,GAAe,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACzD,OAAO,CAAC,KAAK,EAAE,CAAC",sourcesContent:["import { spawn } from \"child_process\";\n\n/**\n * Clase que cuenta el n\xFAmero de veces que se repite la palabra Hola en un archivo el cual se pasa por par\xE1metro al constructor\n */\nexport class CountWords {\n    /**\n     * Constructor que recibe la ruta al fichero\n     * @param path string\n     */\n    constructor(\n        private path: string\n    ) {}\n\n    /**\n     * Cuenta las veces que se repite la palabra Hola en el fichero indicado al constructor, haciendo uso de los comandos\n     * cat y grep de Unix y expresiones regulares de TypeScript\n     */\n    public count() {\n        const expresion: RegExp = /Hola/g;\n        const cat = spawn('cat', [this.path]);\n        const grep = spawn('grep', ['Hola']);\n\n        cat.stdout.pipe(grep.stdin);\n\n        grep.stdout.on('data', (data) => {\n            let matches: string[] = data.toString().match(expresion);\n            console.log(\"La palabra 'Hola', se repite \", matches.length, \" veces en el siguiente archivo: \", this.path);\n        });\n    }\n};\n\nlet counter: CountWords = new CountWords(process.argv[2])\ncounter.count();\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a7fc80e19b29c164b8cf63f2402654ab0e376f9c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1k4pdjvaxw=function(){return actualCoverage;};}return actualCoverage;}cov_1k4pdjvaxw();cov_1k4pdjvaxw().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1k4pdjvaxw().s[1]++;exports.CountWords=void 0;const child_process_1=(cov_1k4pdjvaxw().s[2]++,require("child_process"));/**
 * Clase que cuenta el número de veces que se repite la palabra Hola en un archivo el cual se pasa por parámetro al constructor
 */class CountWords{/**
     * Constructor que recibe la ruta al fichero
     * @param path string
     */constructor(path){cov_1k4pdjvaxw().f[0]++;cov_1k4pdjvaxw().s[3]++;this.path=path;}/**
     * Cuenta las veces que se repite la palabra Hola en el fichero indicado al constructor, haciendo uso de los comandos
     * cat y grep de Unix y expresiones regulares de TypeScript
     */count(){cov_1k4pdjvaxw().f[1]++;const expresion=(cov_1k4pdjvaxw().s[4]++,/Hola/g);const cat=(cov_1k4pdjvaxw().s[5]++,(0,child_process_1.spawn)('cat',[this.path]));const grep=(cov_1k4pdjvaxw().s[6]++,(0,child_process_1.spawn)('grep',['Hola']));cov_1k4pdjvaxw().s[7]++;cat.stdout.pipe(grep.stdin);cov_1k4pdjvaxw().s[8]++;grep.stdout.on('data',data=>{cov_1k4pdjvaxw().f[2]++;let matches=(cov_1k4pdjvaxw().s[9]++,data.toString().match(expresion));cov_1k4pdjvaxw().s[10]++;console.log("La palabra 'Hola', se repite ",matches.length," veces en el siguiente archivo: ",this.path);});}}cov_1k4pdjvaxw().s[11]++;exports.CountWords=CountWords;;let counter=(cov_1k4pdjvaxw().s[12]++,new CountWords(process.argv[2]));cov_1k4pdjvaxw().s[13]++;counter.count();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby91bGwtZXNpdC1pbmYtZHNpLTIxLTIyLXByY3QxMS1hc3luYy1zb2NrZXRzLWFsdTAxMDEzMjYzNTEvc3JjL2VqMi9lajIudHMiLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vdWxsLWVzaXQtaW5mLWRzaS0yMS0yMi1wcmN0MTEtYXN5bmMtc29ja2V0cy1hbHUwMTAxMzI2MzUxL3NyYy9lajIvZWoyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUFzQztBQUV0Qzs7R0FFRztBQUNILE1BQWEsVUFBVTtJQUNuQjs7O09BR0c7SUFDSCxZQUNZLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO0lBQ3JCLENBQUM7SUFFSjs7O09BR0c7SUFDSSxLQUFLO1FBQ1IsTUFBTSxTQUFTLEdBQVcsT0FBTyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUEscUJBQUssRUFBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLElBQUksR0FBRyxJQUFBLHFCQUFLLEVBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUVyQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDNUIsSUFBSSxPQUFPLEdBQWEsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsa0NBQWtDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBekJELGdDQXlCQztBQUFBLENBQUM7QUFFRixJQUFJLE9BQU8sR0FBZSxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDekQsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Bhd24gfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuXG4vKipcbiAqIENsYXNlIHF1ZSBjdWVudGEgZWwgbsO6bWVybyBkZSB2ZWNlcyBxdWUgc2UgcmVwaXRlIGxhIHBhbGFicmEgSG9sYSBlbiB1biBhcmNoaXZvIGVsIGN1YWwgc2UgcGFzYSBwb3IgcGFyw6FtZXRybyBhbCBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY2xhc3MgQ291bnRXb3JkcyB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgcXVlIHJlY2liZSBsYSBydXRhIGFsIGZpY2hlcm9cbiAgICAgKiBAcGFyYW0gcGF0aCBzdHJpbmdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXRoOiBzdHJpbmdcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBDdWVudGEgbGFzIHZlY2VzIHF1ZSBzZSByZXBpdGUgbGEgcGFsYWJyYSBIb2xhIGVuIGVsIGZpY2hlcm8gaW5kaWNhZG8gYWwgY29uc3RydWN0b3IsIGhhY2llbmRvIHVzbyBkZSBsb3MgY29tYW5kb3NcbiAgICAgKiBjYXQgeSBncmVwIGRlIFVuaXggeSBleHByZXNpb25lcyByZWd1bGFyZXMgZGUgVHlwZVNjcmlwdFxuICAgICAqL1xuICAgIHB1YmxpYyBjb3VudCgpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzaW9uOiBSZWdFeHAgPSAvSG9sYS9nO1xuICAgICAgICBjb25zdCBjYXQgPSBzcGF3bignY2F0JywgW3RoaXMucGF0aF0pO1xuICAgICAgICBjb25zdCBncmVwID0gc3Bhd24oJ2dyZXAnLCBbJ0hvbGEnXSk7XG5cbiAgICAgICAgY2F0LnN0ZG91dC5waXBlKGdyZXAuc3RkaW4pO1xuXG4gICAgICAgIGdyZXAuc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGxldCBtYXRjaGVzOiBzdHJpbmdbXSA9IGRhdGEudG9TdHJpbmcoKS5tYXRjaChleHByZXNpb24pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJMYSBwYWxhYnJhICdIb2xhJywgc2UgcmVwaXRlIFwiLCBtYXRjaGVzLmxlbmd0aCwgXCIgdmVjZXMgZW4gZWwgc2lndWllbnRlIGFyY2hpdm86IFwiLCB0aGlzLnBhdGgpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5sZXQgY291bnRlcjogQ291bnRXb3JkcyA9IG5ldyBDb3VudFdvcmRzKHByb2Nlc3MuYXJndlsyXSlcbmNvdW50ZXIuY291bnQoKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6InNqSUFjSTs4TkFkSix5RUFFQTs7R0FHQSxLQUFhQSxXQUFVLENBQ25COzs7T0FJQUMsWUFDWUMsSUFEWixDQUN3QixpREFBWixlQUNSLENBRUo7OztPQUlPQyxLQUFLLDJCQUNSLEtBQU1DLFVBQVMsMEJBQVcsT0FBWCxDQUFmLENBQ0EsS0FBTUMsSUFBRywwQkFBRywwQkFBTSxLQUFOLENBQWEsQ0FBQyxLQUFLSCxJQUFOLENBQWIsQ0FBSCxDQUFULENBQ0EsS0FBTUksS0FBSSwwQkFBRywwQkFBTSxNQUFOLENBQWMsQ0FBQyxNQUFELENBQWQsQ0FBSCxDQUFWLENBSFEsd0JBS1JELEdBQUcsQ0FBQ0UsTUFBSixDQUFXQyxJQUFYLENBQWdCRixJQUFJLENBQUNHLEtBQXJCLEVBTFEsd0JBT1JILElBQUksQ0FBQ0MsTUFBTCxDQUFZRyxFQUFaLENBQWUsTUFBZixDQUF3QkMsSUFBRCxFQUFTLHlCQUM1QixHQUFJQyxRQUFPLDBCQUFhRCxJQUFJLENBQUNFLFFBQUwsR0FBZ0JDLEtBQWhCLENBQXNCVixTQUF0QixDQUFiLENBQVgsQ0FENEIseUJBRTVCVyxPQUFPLENBQUNDLEdBQVIsQ0FBWSwrQkFBWixDQUE2Q0osT0FBTyxDQUFDSyxNQUFyRCxDQUE2RCxrQ0FBN0QsQ0FBaUcsS0FBS2YsSUFBdEcsRUFDSCxDQUhELEVBSUgsQ0F4QmtCLEMseUJBQXZCZ0IsOEJBeUJDLENBRUQsR0FBSUMsUUFBTywyQkFBZSxHQUFJbkIsV0FBSixDQUFlb0IsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYixDQUFmLENBQWYsQ0FBWCxDLHlCQUNBRixPQUFPLENBQUNoQixLQUFSIiwibmFtZXMiOlsiQ291bnRXb3JkcyIsImNvbnN0cnVjdG9yIiwicGF0aCIsImNvdW50IiwiZXhwcmVzaW9uIiwiY2F0IiwiZ3JlcCIsInN0ZG91dCIsInBpcGUiLCJzdGRpbiIsIm9uIiwiZGF0YSIsIm1hdGNoZXMiLCJ0b1N0cmluZyIsIm1hdGNoIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsImV4cG9ydHMiLCJjb3VudGVyIiwicHJvY2VzcyIsImFyZ3YiXSwic291cmNlcyI6WyIvaG9tZS91c3VhcmlvL3VsbC1lc2l0LWluZi1kc2ktMjEtMjItcHJjdDExLWFzeW5jLXNvY2tldHMtYWx1MDEwMTMyNjM1MS9zcmMvZWoyL2VqMi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcGF3biB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5cbi8qKlxuICogQ2xhc2UgcXVlIGN1ZW50YSBlbCBuw7ptZXJvIGRlIHZlY2VzIHF1ZSBzZSByZXBpdGUgbGEgcGFsYWJyYSBIb2xhIGVuIHVuIGFyY2hpdm8gZWwgY3VhbCBzZSBwYXNhIHBvciBwYXLDoW1ldHJvIGFsIGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjbGFzcyBDb3VudFdvcmRzIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBxdWUgcmVjaWJlIGxhIHJ1dGEgYWwgZmljaGVyb1xuICAgICAqIEBwYXJhbSBwYXRoIHN0cmluZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBhdGg6IHN0cmluZ1xuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEN1ZW50YSBsYXMgdmVjZXMgcXVlIHNlIHJlcGl0ZSBsYSBwYWxhYnJhIEhvbGEgZW4gZWwgZmljaGVybyBpbmRpY2FkbyBhbCBjb25zdHJ1Y3RvciwgaGFjaWVuZG8gdXNvIGRlIGxvcyBjb21hbmRvc1xuICAgICAqIGNhdCB5IGdyZXAgZGUgVW5peCB5IGV4cHJlc2lvbmVzIHJlZ3VsYXJlcyBkZSBUeXBlU2NyaXB0XG4gICAgICovXG4gICAgcHVibGljIGNvdW50KCkge1xuICAgICAgICBjb25zdCBleHByZXNpb246IFJlZ0V4cCA9IC9Ib2xhL2c7XG4gICAgICAgIGNvbnN0IGNhdCA9IHNwYXduKCdjYXQnLCBbdGhpcy5wYXRoXSk7XG4gICAgICAgIGNvbnN0IGdyZXAgPSBzcGF3bignZ3JlcCcsIFsnSG9sYSddKTtcblxuICAgICAgICBjYXQuc3Rkb3V0LnBpcGUoZ3JlcC5zdGRpbik7XG5cbiAgICAgICAgZ3JlcC5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgbGV0IG1hdGNoZXM6IHN0cmluZ1tdID0gZGF0YS50b1N0cmluZygpLm1hdGNoKGV4cHJlc2lvbik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxhIHBhbGFicmEgJ0hvbGEnLCBzZSByZXBpdGUgXCIsIG1hdGNoZXMubGVuZ3RoLCBcIiB2ZWNlcyBlbiBlbCBzaWd1aWVudGUgYXJjaGl2bzogXCIsIHRoaXMucGF0aCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmxldCBjb3VudGVyOiBDb3VudFdvcmRzID0gbmV3IENvdW50V29yZHMocHJvY2Vzcy5hcmd2WzJdKVxuY291bnRlci5jb3VudCgpO1xuIl19