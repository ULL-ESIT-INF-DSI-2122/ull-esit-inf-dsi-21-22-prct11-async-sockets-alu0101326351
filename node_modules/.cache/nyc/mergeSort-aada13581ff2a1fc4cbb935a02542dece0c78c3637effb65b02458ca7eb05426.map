{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-21-22-prct09-filesystem-notes-app-alu0101326351/src/mergeSort.ts","sources":["/home/usuario/ull-esit-inf-dsi-21-22-prct09-filesystem-notes-app-alu0101326351/src/mergeSort.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACC,MAAa,SAAS;IAClB;;;;OAIG;IACI,OAAO,CAAC,IAAc;QACzB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;YAClB,OAAO,IAAI,CAAC;SACf;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE3C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC,KAAK,CACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAC1C,CAAC;IACN,CAAC;IAEM,KAAK,CAAE,IAAI,EAAE,KAAK;QACrB,IAAI,WAAW,GAAG,EAAE,EAAE,SAAS,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC;QAEpD,OAAO,SAAS,GAAG,IAAI,CAAC,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE;YAC3D,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;gBACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClC,SAAS,EAAE,CAAC;aACb;iBAAM;gBACL,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpC,UAAU,EAAE,CAAC;aACd;SACF;QAED,OAAO,WAAW;aACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aAC7B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3C,CAAC;CACN;AArCD,8BAqCC","sourcesContent":["import { Strategy } from \"./Solve\";\n\n/**\n * Clase que implementa el algoritmo MergeSort\n */\n    export class MergeSort implements Strategy {\n        /**\n         * Ordena el array usando el algoritmo mergeSort\n         * @param data \n         * @returns \n         */\n        public execute(data: number[]) {\n            if (data.length <= 1) {\n                return data;\n            }\n            const middle = Math.floor(data.length / 2);\n            \n            const left = data.slice(0, middle);\n            const right = data.slice(middle);\n            \n            return this.merge(\n                this.execute(left), this.execute(right)\n            );\n        }\n\n        public merge (left, right) {\n            let resultArray = [], leftIndex = 0, rightIndex = 0;\n          \n            while (leftIndex < left.length && rightIndex < right.length) {\n              if (left[leftIndex] < right[rightIndex]) {\n                resultArray.push(left[leftIndex]);\n                leftIndex++; \n              } else {\n                resultArray.push(right[rightIndex]);\n                rightIndex++; \n              }\n            }\n\n            return resultArray\n                    .concat(left.slice(leftIndex))\n                    .concat(right.slice(rightIndex));\n          }\n    }\n\n\n"]}